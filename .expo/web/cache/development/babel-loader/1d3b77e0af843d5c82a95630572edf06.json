{"ast":null,"code":"import { always, block, call, clockRunning, cond, set, startClock, stopClock } from \"../base\";\nimport Clock from \"../core/AnimatedClock\";\nimport { evaluateOnce } from \"../derived/evaluateOnce\";\n\nfunction createOldAnimationObject(node, AnimationClass, value, config) {\n  var newClock = new Clock();\n  var currentState = AnimationClass.getDefaultState();\n  var alwaysNode;\n  var isStarted = false;\n  var isDone = false;\n  var wasStopped = false;\n  var animationCallback;\n  var animation = {\n    start: function start(currentAnimationCallback) {\n      animationCallback = currentAnimationCallback;\n\n      if (isStarted) {\n        animationCallback && animationCallback({\n          finished: false\n        });\n        return;\n      }\n\n      if (isDone) {\n        console.warn('Animation has been finished before');\n        return;\n      }\n\n      if (!value.isNativelyInitialized()) {\n        return;\n      }\n\n      isStarted = true;\n      evaluateOnce(set(currentState.position, value), currentState.position, function () {\n        alwaysNode = always(set(value, block([cond(clockRunning(newClock), 0, startClock(newClock)), node(newClock, currentState, config), cond(currentState.finished, [call([], function () {\n          isStarted = false;\n\n          if (!wasStopped) {\n            isDone = true;\n          }\n\n          value.__detachAnimation(animation);\n\n          isDone = true;\n\n          if (!wasStopped) {\n            wasStopped = false;\n          }\n        }), stopClock(newClock)]), currentState.position])));\n\n        value.__attachAnimation(animation);\n\n        alwaysNode.__addChild(value);\n      });\n    },\n    __detach: function __detach() {\n      animationCallback && animationCallback({\n        finished: isDone\n      });\n      animationCallback = null;\n\n      alwaysNode.__removeChild(value);\n    },\n    stop: function stop() {\n      if (isDone) {\n        console.warn('Calling stop has no effect as the animation has already completed');\n        return;\n      }\n\n      if (!isStarted) {\n        console.warn(\"Calling stop has no effect as the animation hasn't been started\");\n        return;\n      }\n\n      wasStopped = true;\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\n    },\n    __stopImmediately_testOnly: function __stopImmediately_testOnly(result) {\n      animation.stop();\n      isDone = result;\n\n      value.__detachAnimation(animation);\n    }\n  };\n  return animation;\n}\n\nexport default function backwardsCompatibleAnimWrapper(node, AnimationClass) {\n  return function (clock, state, config) {\n    if (config !== undefined) {\n      return node(clock, state, config);\n    }\n\n    return createOldAnimationObject(node, AnimationClass, clock, state);\n  };\n}","map":{"version":3,"sources":["E:/Projects/ZENE/C68-transaction-and-search/node_modules/react-native-reanimated/src/animations/backwardCompatibleAnimWrapper.js"],"names":["always","block","call","clockRunning","cond","set","startClock","stopClock","Clock","evaluateOnce","createOldAnimationObject","node","AnimationClass","value","config","newClock","currentState","getDefaultState","alwaysNode","isStarted","isDone","wasStopped","animationCallback","animation","start","currentAnimationCallback","finished","console","warn","isNativelyInitialized","position","__detachAnimation","__attachAnimation","__addChild","__detach","__removeChild","stop","__stopImmediately_testOnly","result","backwardsCompatibleAnimWrapper","clock","state","undefined"],"mappings":"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","sourcesContent":["import {\r\n  always,\r\n  block,\r\n  call,\r\n  clockRunning,\r\n  cond,\r\n  set,\r\n  startClock,\r\n  stopClock,\r\n} from '../base';\r\nimport Clock from '../core/AnimatedClock';\r\nimport { evaluateOnce } from '../derived/evaluateOnce';\r\n\r\nfunction createOldAnimationObject(node, AnimationClass, value, config) {\r\n  const newClock = new Clock();\r\n  const currentState = AnimationClass.getDefaultState();\r\n  let alwaysNode;\r\n  let isStarted = false;\r\n  let isDone = false;\r\n  let wasStopped = false;\r\n  let animationCallback;\r\n  const animation = {\r\n    start: currentAnimationCallback => {\r\n      animationCallback = currentAnimationCallback;\r\n      if (isStarted) {\r\n        animationCallback && animationCallback({ finished: false });\r\n        return;\r\n      }\r\n      if (isDone) {\r\n        console.warn('Animation has been finished before');\r\n        // inconsistent with React Native\r\n        return;\r\n      }\r\n\r\n      if (!value.isNativelyInitialized()) {\r\n        return;\r\n      }\r\n\r\n      isStarted = true;\r\n      evaluateOnce(\r\n        set(currentState.position, value),\r\n        currentState.position,\r\n        () => {\r\n          alwaysNode = always(\r\n            set(\r\n              value,\r\n              block([\r\n                cond(clockRunning(newClock), 0, startClock(newClock)),\r\n                node(newClock, currentState, config),\r\n                cond(currentState.finished, [\r\n                  call([], () => {\r\n                    isStarted = false;\r\n                    if (!wasStopped) {\r\n                      isDone = true;\r\n                    }\r\n                    value.__detachAnimation(animation);\r\n                    isDone = true;\r\n                    if (!wasStopped) {\r\n                      wasStopped = false;\r\n                    }\r\n                  }),\r\n                  stopClock(newClock),\r\n                ]),\r\n                currentState.position,\r\n              ])\r\n            )\r\n          );\r\n          value.__attachAnimation(animation);\r\n          alwaysNode.__addChild(value);\r\n        }\r\n      );\r\n    },\r\n    __detach: () => {\r\n      animationCallback && animationCallback({ finished: isDone });\r\n      animationCallback = null;\r\n      alwaysNode.__removeChild(value);\r\n    },\r\n    stop: () => {\r\n      if (isDone) {\r\n        console.warn(\r\n          'Calling stop has no effect as the animation has already completed'\r\n        );\r\n        return;\r\n      }\r\n      if (!isStarted) {\r\n        console.warn(\r\n          \"Calling stop has no effect as the animation hasn't been started\"\r\n        );\r\n        return;\r\n      }\r\n      wasStopped = true;\r\n      evaluateOnce(set(currentState.finished, 1), currentState.finished);\r\n    },\r\n    __stopImmediately_testOnly: result => {\r\n      animation.stop();\r\n      isDone = result;\r\n      value.__detachAnimation(animation);\r\n    },\r\n  };\r\n  return animation;\r\n}\r\n\r\n/**\r\n * Depending on the arguments list we either return animation node or return an\r\n * animation object that is compatible with the original Animated API\r\n */\r\nexport default function backwardsCompatibleAnimWrapper(node, AnimationClass) {\r\n  return (clock, state, config) => {\r\n    if (config !== undefined) {\r\n      return node(clock, state, config);\r\n    }\r\n    return createOldAnimationObject(node, AnimationClass, clock, state);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}